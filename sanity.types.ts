/**
 * ---------------------------------------------------------------------------------
 * This file has been generated by Sanity TypeGen.
 * Command: `sanity typegen generate`
 *
 * Any modifications made directly to this file will be overwritten the next time
 * the TypeScript definitions are generated. Please make changes to the Sanity
 * schema definitions and/or GROQ queries if you need to update these types.
 *
 * For more information on how to use Sanity TypeGen, visit the official documentation:
 * https://www.sanity.io/docs/sanity-typegen
 * ---------------------------------------------------------------------------------
 */

// Source: schema.json
export type SanityImagePaletteSwatch = {
  _type: "sanity.imagePaletteSwatch";
  background?: string;
  foreground?: string;
  population?: number;
  title?: string;
};

export type SanityImagePalette = {
  _type: "sanity.imagePalette";
  darkMuted?: SanityImagePaletteSwatch;
  lightVibrant?: SanityImagePaletteSwatch;
  darkVibrant?: SanityImagePaletteSwatch;
  vibrant?: SanityImagePaletteSwatch;
  dominant?: SanityImagePaletteSwatch;
  lightMuted?: SanityImagePaletteSwatch;
  muted?: SanityImagePaletteSwatch;
};

export type SanityImageDimensions = {
  _type: "sanity.imageDimensions";
  height?: number;
  width?: number;
  aspectRatio?: number;
};

export type SanityImageHotspot = {
  _type: "sanity.imageHotspot";
  x?: number;
  y?: number;
  height?: number;
  width?: number;
};

export type SanityImageCrop = {
  _type: "sanity.imageCrop";
  top?: number;
  bottom?: number;
  left?: number;
  right?: number;
};

export type SanityFileAsset = {
  _id: string;
  _type: "sanity.fileAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  source?: SanityAssetSourceData;
};

export type SanityImageAsset = {
  _id: string;
  _type: "sanity.imageAsset";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  originalFilename?: string;
  label?: string;
  title?: string;
  description?: string;
  altText?: string;
  sha1hash?: string;
  extension?: string;
  mimeType?: string;
  size?: number;
  assetId?: string;
  uploadId?: string;
  path?: string;
  url?: string;
  metadata?: SanityImageMetadata;
  source?: SanityAssetSourceData;
};

export type SanityImageMetadata = {
  _type: "sanity.imageMetadata";
  location?: Geopoint;
  dimensions?: SanityImageDimensions;
  palette?: SanityImagePalette;
  lqip?: string;
  blurHash?: string;
  hasAlpha?: boolean;
  isOpaque?: boolean;
};

export type Geopoint = {
  _type: "geopoint";
  lat?: number;
  lng?: number;
  alt?: number;
};

export type SanityAssetSourceData = {
  _type: "sanity.assetSourceData";
  name?: string;
  id?: string;
  url?: string;
};

export type Post = {
  _id: string;
  _type: "post";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  title?: string;
  slug?: Slug;
  description?: string;
  author?: {
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    [internalGroqTypeReferenceTo]?: "user";
  };
  view?: number;
  category?: string;
  mainImage?: string;
  content?: string;
  likes?: number;
  likedBy?: Array<{
    _ref: string;
    _type: "reference";
    _weak?: boolean;
    _key: string;
    [internalGroqTypeReferenceTo]?: "user";
  }>;
};

export type User = {
  _id: string;
  _type: "user";
  _createdAt: string;
  _updatedAt: string;
  _rev: string;
  id?: number;
  name?: string;
  username?: string;
  email?: string;
  phone?: string;
  gender?: string;
  imageUrl?: string;
  bio?: string;
};

export type Slug = {
  _type: "slug";
  current?: string;
  source?: string;
};

export type Markdown = string;

export type AllSanitySchemaTypes = SanityImagePaletteSwatch | SanityImagePalette | SanityImageDimensions | SanityImageHotspot | SanityImageCrop | SanityFileAsset | SanityImageAsset | SanityImageMetadata | Geopoint | SanityAssetSourceData | Post | User | Slug | Markdown;
export declare const internalGroqTypeReferenceTo: unique symbol;
// Source: ./sanity/lib/queries.ts
// Variable: AUTHOR_BY_GITHUB_ID_QUERY
// Query: *[_type == "user" && id == $id][0]{  _id,   id,  name,  username,  email,  bio,  imageUrl,  phone}
export type AUTHOR_BY_GITHUB_ID_QUERYResult = {
  _id: string;
  id: number | null;
  name: string | null;
  username: string | null;
  email: string | null;
  bio: string | null;
  imageUrl: string | null;
  phone: string | null;
} | null;
// Variable: POSTS_QUERIES
// Query: *[_type == "post"] | order(_createdAt desc){  _id,  title,  slug,  description,   category,   view,  likes,  mainImage,  author -> {    _id,    name,    username,     imageUrl,    bio  },  likes,  _createdAt,   _updatedAt }
export type POSTS_QUERIESResult = Array<{
  _id: string;
  title: string | null;
  slug: Slug | null;
  description: string | null;
  category: string | null;
  view: number | null;
  likes: number | null;
  mainImage: string | null;
  author: {
    _id: string;
    name: string | null;
    username: string | null;
    imageUrl: string | null;
    bio: string | null;
  } | null;
  _createdAt: string;
  _updatedAt: string;
}>;
// Variable: POSTS_QUERY_BY_SLUG
// Query: *[_type == "post" && slug.current == $slug][0]{  _id,  slug,  title,  likes,  description,   category,   view,  mainImage,  author -> {    _id,    name,    username,     imageUrl  },  content,  likes,  likedBy[]->{_id, name, imageUrl},  "hasLiked": $userId in likedBy[]._ref,  _createdAt,   _updatedAt }
export type POSTS_QUERY_BY_SLUGResult = {
  _id: string;
  slug: Slug | null;
  title: string | null;
  likes: number | null;
  description: string | null;
  category: string | null;
  view: number | null;
  mainImage: string | null;
  author: {
    _id: string;
    name: string | null;
    username: string | null;
    imageUrl: string | null;
  } | null;
  content: string | null;
  likedBy: Array<{
    _id: string;
    name: string | null;
    imageUrl: string | null;
  }> | null;
  hasLiked: boolean | null;
  _createdAt: string;
  _updatedAt: string;
} | null;
// Variable: POST_LIKES_QUERY
// Query: *[_type == "post" && _id == $postId][0]{  "userLiked": $userId in likedBy[]._ref,  likedBy[]->{_id, name, imageUrl},  likes}
export type POST_LIKES_QUERYResult = {
  userLiked: boolean | null;
  likedBy: Array<{
    _id: string;
    name: string | null;
    imageUrl: string | null;
  }> | null;
  likes: number | null;
} | null;

// Query TypeMap
import "@sanity/client";
declare module "@sanity/client" {
  interface SanityQueries {
    "\n*[_type == \"user\" && id == $id][0]{\n  _id, \n  id,\n  name,\n  username,\n  email,\n  bio,\n  imageUrl,\n  phone\n}\n": AUTHOR_BY_GITHUB_ID_QUERYResult;
    "\n*[_type == \"post\"] | order(_createdAt desc){\n  _id,\n  title,\n  slug,\n  description, \n  category, \n  view,\n  likes,\n  mainImage,\n  author -> {\n    _id,\n    name,\n    username, \n    imageUrl,\n    bio\n  },\n  likes,\n  _createdAt, \n  _updatedAt \n}\n": POSTS_QUERIESResult;
    "*[_type == \"post\" && slug.current == $slug][0]{\n  _id,\n  slug,\n  title,\n  likes,\n  description, \n  category, \n  view,\n  mainImage,\n  author -> {\n    _id,\n    name,\n    username, \n    imageUrl\n  },\n  content,\n  likes,\n  likedBy[]->{_id, name, imageUrl},\n  \"hasLiked\": $userId in likedBy[]._ref,\n  _createdAt, \n  _updatedAt \n}\n": POSTS_QUERY_BY_SLUGResult;
    "*[_type == \"post\" && _id == $postId][0]{\n  \"userLiked\": $userId in likedBy[]._ref,\n  likedBy[]->{_id, name, imageUrl},\n  likes\n}": POST_LIKES_QUERYResult;
  }
}
